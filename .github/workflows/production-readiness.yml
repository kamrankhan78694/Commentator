name: Production Readiness Tests

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - core
        - accessibility
        - web3
        - performance

jobs:
  production-readiness-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install chromium

    - name: Run Production Readiness Tests (All)
      if: ${{ github.event.inputs.test_type == 'all' || github.event.inputs.test_type == '' }}
      run: npm run test:production-readiness:ci
      env:
        NODE_ENV: production
        OUTPUT_DIR: ./test-results

    - name: Run Core Tests Only
      if: ${{ github.event.inputs.test_type == 'core' }}
      run: npm run test:production-readiness:core -- --format junit --output ./test-results
      env:
        NODE_ENV: production

    - name: Run Accessibility Tests
      if: ${{ github.event.inputs.test_type == 'accessibility' }}
      run: |
        npm run dev &
        sleep 10
        npx playwright test --config=playwright-accessibility.config.js
        pkill -f "python3 -m http.server"
      env:
        NODE_ENV: development

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: production-readiness-results-node-${{ matrix.node-version }}
        path: |
          test-results/
          screenshots/
        retention-days: 30

    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Production Readiness Tests (Node ${{ matrix.node-version }})
        path: 'test-results/*.xml'
        reporter: java-junit
        fail-on-error: true

    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = './test-results/production-readiness-summary.md';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Production Readiness Test Results\n\n${summary}\n\n*Automated test run for commit ${context.sha.substring(0, 7)}*`
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    needs: production-readiness-tests
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Run security tests
      run: npm run test:security

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run performance benchmark
      run: |
        npm run dev &
        sleep 10
        npm run test:production-readiness -- --format json --output ./benchmarks
        pkill -f "python3 -m http.server"

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'customSmallerIsBetter'
        output-file-path: ./benchmarks/production-readiness-*.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '150%'
        fail-on-alert: false

  deployment-readiness:
    runs-on: ubuntu-latest
    needs: [production-readiness-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Evaluate deployment readiness
      run: |
        echo "## ðŸš€ Deployment Readiness Assessment" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Production readiness tests: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "âœ… Security scan: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸŽ¯ **System is ready for production deployment**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review test artifacts for detailed analysis" >> $GITHUB_STEP_SUMMARY
        echo "2. Proceed with staging deployment" >> $GITHUB_STEP_SUMMARY
        echo "3. Run final production validation" >> $GITHUB_STEP_SUMMARY

    - name: Create deployment badge
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} \
          -d '{
            "state": "success",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "description": "Production readiness validated",
            "context": "production-readiness"
          }'